// Code generated by mockery v2.18.0. DO NOT EDIT.

package utils_mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CacheEngine is an autogenerated mock type for the CacheEngine type
type CacheEngine struct {
	mock.Mock
}

// GetBytesFromCache provides a mock function with given fields: ctx, key
func (_m *CacheEngine) GetBytesFromCache(ctx context.Context, key []byte) ([]byte, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBytesInfoCache provides a mock function with given fields: ctx, key, cache, expired
func (_m *CacheEngine) SetBytesInfoCache(ctx context.Context, key []byte, cache interface{}, expired int) error {
	ret := _m.Called(ctx, key, cache, expired)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, interface{}, int) error); ok {
		r0 = rf(ctx, key, cache, expired)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCacheEngine interface {
	mock.TestingT
	Cleanup(func())
}

// NewCacheEngine creates a new instance of CacheEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCacheEngine(t mockConstructorTestingTNewCacheEngine) *CacheEngine {
	mock := &CacheEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
